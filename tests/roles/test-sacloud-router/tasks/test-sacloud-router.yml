---
- name: Test fail if missing access_token
  sacloud_router:
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
  register: result
  ignore_errors: true
- name: Verify results of fail if missing params
  assert:
    that:
      - result|failed
      - 'result.msg == "missing required arguments: access_token"'

- name: Test fail if missing access_token_secret
  sacloud_router:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
  register: result
  ignore_errors: true
- name: Verify results of fail if missing params
  assert:
    that:
      - result|failed
      - 'result.msg == "missing required arguments: access_token_secret"'

- name: Test if sacloud router successfully created
  sacloud_router:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
    zone_id: is1a
    name: a test router
    band_width_mbps: 100
    network_mask_len: 28
    icon: DNS
    desc: |-
      this
      is
      a
      router
    tags:
      - auto-reboot
      - boot-network
    state: present
  register: result
- name: Verify results of success
  assert:
    that:
      - result|success

- name: Test if sacloud router successfully updated
  sacloud_router:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
    router_resource_id: "{{ sacloud_router_resource_id }}"
    band_width_mbps: 500
    state: present
  register: result
- name: Verify results of success
  assert:
    that:
      - result|success

- name: Test fail if non exist resource id
  sacloud_router:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
    router_resource_id: 1
    state: absent
  register: result
  ignore_errors: true
- name: Verify results of fail if non exist router_resource_id
  assert:
    that:
      - result|failed

- name: Test fail if state is absent and no resource id
  sacloud_router:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
    state: absent
  register: result
  ignore_errors: true
- name: Verify results of fail if missing params
  assert:
    that:
      - result|failed
      - 'result.msg == "missing required arguments: router_resource_id"'

- name: Setup sacloud server
  sacloud_server:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
    name: ubuntu14_LTS_64
    zone_id: is1a
    cpu: 2
    mem: 2
    icon: Ubuntu
    desc: |-
      this
      is
      a
      server
    tags:
      - auto-reboot
      - keyboard-us
    state: present

- name: Test fail if state is connect and no router resource id
  sacloud_router:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
    server_resource_id: "{{ sacloud_server_resource_id }}"
    state: connected
  register: result
  ignore_errors: true
- name: Verify results of fail if missing params
  assert:
    that:
      - result|failed
      - 'result.msg == "missing required arguments: router_resource_id"'

- name: Test fail if state is connect and no server resource id
  sacloud_router:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
    router_resource_id: "{{ sacloud_router_resource_id }}"
    state: connected
  register: result
  ignore_errors: true
- name: Verify results of fail if missing params
  assert:
    that:
      - result|failed
      - 'result.msg == "missing required arguments: server_resource_id"'

- name: Test fail if state is connect and no exist server resource id
  sacloud_router:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
    router_resource_id: "{{ sacloud_router_resource_id }}"
    server_resource_id: 1
    state: connected
  register: result
  ignore_errors: true
- name: Verify results of fail if missing params
  assert:
    that:
      - result|failed
      - 'result.msg == "Failed to find server iface: 1"'

- name: Test if connect to sacloud server successfully
  sacloud_router:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
    router_resource_id: "{{ sacloud_router_resource_id }}"
    server_resource_id: "{{ sacloud_server_resource_id }}"
    state: connected
  register: result
- name: Verify results of success
  assert:
    that:
      - result|success

- name: Teardown sacloud server
  sacloud_server:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
    server_resource_id: "{{ sacloud_server_resource_id }}"
    state: absent
  ignore_errors: true

- name: Test if sacloud router successfully removed
  sacloud_router:
    access_token: "{{ lookup('env', 'ACCESS_TOKEN') }}"
    access_token_secret: "{{ lookup('env', 'ACCESS_TOKEN_SECRET') }}"
    router_resource_id: "{{ sacloud_router_resource_id }}"
    state: absent
  register: result
- name: Verify results of success
  assert:
    that:
      - result|success
